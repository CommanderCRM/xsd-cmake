--- ./cutl/shared-ptr/base.cxx	2024-12-07 23:46:00.303231096 +0700
+++ ./cutl/shared-ptr/base.cxx.2	2024-12-07 23:49:56.165297859 +0700
@@ -16,7 +16,7 @@
 namespace cutl
 {
   char const* not_shared::
-  what () const throw ()
+  what () const noexcept
   {
     return "object is not shared";
   }
@@ -25,7 +25,7 @@
 //
 //
 void*
-operator new (size_t n, cutl::share s) throw (std::bad_alloc)
+operator new (size_t n, cutl::share s)
 {
   if (s == shared)
   {
@@ -45,7 +45,7 @@
 }
 
 void
-operator delete (void* p, cutl::share s) throw ()
+operator delete (void* p, cutl::share s) noexcept
 {
   // This version of operator delete is only called when the c-tor
   // fails. In this case there is no object and we can just free the
--- ./cutl/shared-ptr/base.ixx	2024-12-07 23:46:00.303231096 +0700
+++ ./cutl/shared-ptr/base.ixx.2	2024-12-07 23:51:02.785887193 +0700
@@ -59,19 +59,19 @@
   }
 
   inline void* shared_base::
-  operator new (std::size_t n, share) throw (std::bad_alloc)
+  operator new (std::size_t n, share)
   {
     return ::operator new (n);
   }
 
   inline void shared_base::
-  operator delete (void* p, share) throw ()
+  operator delete (void* p, share) noexcept
   {
     ::operator delete (p);
   }
 
   inline void shared_base::
-  operator delete (void* p) throw ()
+  operator delete (void* p) noexcept
   {
     ::operator delete (p);
   }
--- ./cutl/shared-ptr/base.hxx	2024-12-07 23:46:00.303231096 +0700
+++ ./cutl/shared-ptr/base.hxx.2	2024-12-07 23:51:54.816345831 +0700
@@ -31,17 +31,17 @@
 extern LIBCUTL_EXPORT cutl::share exclusive;
 
 LIBCUTL_EXPORT void*
-operator new (std::size_t, cutl::share) throw (std::bad_alloc);
+operator new (std::size_t, cutl::share);
 
 LIBCUTL_EXPORT void
-operator delete (void*, cutl::share) throw ();
+operator delete (void*, cutl::share) noexcept;
 
 namespace cutl
 {
   struct LIBCUTL_EXPORT not_shared: exception
   {
     virtual char const*
-    what () const throw ();
+    what () const noexcept;
   };
 
   struct LIBCUTL_EXPORT shared_base
@@ -61,13 +61,13 @@
     _ref_count () const;
 
     void*
-    operator new (std::size_t, share) throw (std::bad_alloc);
+    operator new (std::size_t, share);
 
     void
-    operator delete (void*, share) throw ();
+    operator delete (void*, share) noexcept;
 
     void
-    operator delete (void*) throw ();
+    operator delete (void*) noexcept;
 
   protected:
     std::size_t counter_;
